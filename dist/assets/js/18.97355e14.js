(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{424:function(t,a,s){t.exports=s.p+"assets/img/git_pull.cb73c307.jpg"},518:function(t,a,s){"use strict";s.r(a);var e=s(56),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"_1-git-初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-初始化"}},[t._v("#")]),t._v(" 1.git 初始化")]),t._v(" "),e("ul",[e("li",[t._v("清空现有的 key")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("rm -rf ~/.ssh/*\n")])])]),e("ul",[e("li",[t._v("运行")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('ssh-keygen -t rsa -b 4096 -C "你的邮箱"\n')])])]),e("ul",[e("li",[t._v("执行")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("cat ~/.ssh/id_rsa.pub\n")])])]),e("ul",[e("li",[e("p",[t._v("把得到的公钥放到 GitHub 上")])]),t._v(" "),e("li",[e("p",[t._v("执行")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("ssh -T git@github.com\n")])])]),e("ul",[e("li",[t._v("之后配置下 git（这是全局配置，如果配置单个仓库，去掉 global 即可）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git config --global user.name 你的英文名   #此英文名不需要跟GitHub账号保持一致\ngit config --global user.email 你的邮箱   #此邮箱不需要跟GitHub账号保持一致\ngit config --global push.default matching\ngit config --global core.quotepath false\ngit config --global core.editor "vim"\n\n')])])]),e("ul",[e("li",[t._v("增加 origin")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" git remote add origin  https://github.com/Composur/vue-admin.git\n")])])]),e("h3",{attrs:{id:"_2-git-clone-branch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-clone-branch"}},[t._v("#")]),t._v(" 2.git clone branch")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch -r/-a 查看远程/所有分支\n")])])]),e("p",[t._v("然后")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git checkout -b 本地分支名x origin/远程分支名x\n")])])]),e("p",[t._v("会在本地新建分支 x，并自动切换到该本地分支 x")]),t._v(" "),e("h3",{attrs:{id:"_3-git-放弃本地修改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-git-放弃本地修改"}},[t._v("#")]),t._v(" 3.git 放弃本地修改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态\n")])])]),e("h3",{attrs:{id:"_4-git-拉取远程分支到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-git-拉取远程分支到本地"}},[t._v("#")]),t._v(" 4.git 拉取远程分支到本地")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("这里本地已经与 origin master 建立连接")])]),t._v(" "),e("li",[e("p",[t._v("把远程分支拉到本地")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git fetch origin dev（dev为远程仓库的分支名）\n")])])]),e("ul",[e("li",[t._v("在本地创建分支 dev 并切换到该分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git checkout -b dev(本地分支名称) origin/dev(远程分支名称)\n")])])]),e("ul",[e("li",[t._v("把某个分支上的内容都拉取到本地")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git pull origin dev(远程分支名称)\n")])])]),e("ul",[e("li",[t._v("建立本地分支和远程分支的关联，使用")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch --set-upstream branch-name origin/branch-name\n")])])]),e("h3",{attrs:{id:"_5-git-删除本地-远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-git-删除本地-远程分支"}},[t._v("#")]),t._v(" 5.git 删除本地/远程分支")]),t._v(" "),e("ul",[e("li",[t._v("删除本地")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch -d BranchName\n")])])]),e("ul",[e("li",[t._v("删除远程")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push origin --delete BranchName\n\n")])])]),e("h3",{attrs:{id:"_6-git-log"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-git-log"}},[t._v("#")]),t._v(" 6.Git log")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("默认不用任何参数的话，git log 会按提交时间列出所有的更新")])]),t._v(" "),e("li",[e("p",[t._v("git log -p -2 我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新：")])]),t._v(" "),e("li",[e("p",[t._v("Git 提供了 --word-diff 选项。我们可以将其添加到 git log -p 命令的后面，从而获取单词层面上的对比")])])]),t._v(" "),e("h3",{attrs:{id:"_7-修改分支名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-修改分支名称"}},[t._v("#")]),t._v(" 7.修改分支名称")]),t._v(" "),e("ul",[e("li",[t._v("当前分支修改")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch -m new-name\n")])])]),e("ul",[e("li",[t._v("其它分支修改")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch -m old-name new-name\n")])])]),e("ul",[e("li",[t._v("重命名本地和远程分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git push origin :old-name new-name\n\ngit push origin -u new-name\n")])])]),e("h3",{attrs:{id:"_8-合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-合并分支"}},[t._v("#")]),t._v(" 8.合并分支")]),t._v(" "),e("ul",[e("li",[t._v("dev 合并到 master")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout master\ngit pull origin master\ngit merge dev\ngit push origin master\n\n")])])]),e("h3",{attrs:{id:"_9-git-同步-fork-的-repo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-git-同步-fork-的-repo"}},[t._v("#")]),t._v(" \b9.git 同步 fork 的 repo")]),t._v(" "),e("ul",[e("li",[t._v("查看远程")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git remote -v\n> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n")])])]),e("ul",[e("li",[t._v("增加远程 fork 的 upstream")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git\n$ git remote -v\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n> origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n> upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n\n")])])]),e("ul",[e("li",[t._v("更新")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git fetch upstream branch_name\n> remote: Counting objects: 75, done.\n> remote: Compressing objects: 100% (53/53), done.\n> remote: Total 62 (delta 27), reused 44 (delta 9)\n> Unpacking objects: 100% (62/62), done.\n> From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY\n>  * [new branch]      master     -> upstream/master\n\n\n$ git rebase upstream branch_name\n")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("# 上面两步合为一步\n\n$ git pull upstream  branch_name --rebase\n")])])]),e("ul",[e("li",[e("p",[t._v("提交到代码（remote origin）")]),t._v(" "),e("ul",[e("li",[t._v("初次 push")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git push --set-upstream origin branch_name\n")])])]),e("ul",[e("li",[t._v("非初次 push")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git push\n")])])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git checkout master\n> Switched to branc 'master'\n")])])]),e("ul",[e("li",[t._v("本地合并到 upstream/master")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git merge upstream/master\n> Updating a422352..5fdff0f\n> Fast-forward\n>  README                    |    9 -------\n>  README.md                 |    7 ++++++\n>  2 files changed, 7 insertions(+), 9 deletions(-)\n>  delete mode 100644 README\n>  create mode 100644 README.md\n")])])]),e("ul",[e("li",[t._v("更新自己的 repo")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git push origin master\n")])])]),e("h3",{attrs:{id:"_10-reset-版本回退利器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-reset-版本回退利器"}},[t._v("#")]),t._v(" 10.Reset 版本回退利器")]),t._v(" "),e("h4",{attrs:{id:"如果我们想回退到某个版本可以用-git-log-查看-git-log-命令显示从最近到最远的提交日志如果嫌输出信息太多-可以试试加上-pretty-oneline-参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如果我们想回退到某个版本可以用-git-log-查看-git-log-命令显示从最近到最远的提交日志如果嫌输出信息太多-可以试试加上-pretty-oneline-参数"}},[t._v("#")]),t._v(" 如果我们想回退到某个版本可以用 git log 查看，git log 命令显示从最近到最远的提交日志如果嫌输出信息太多，可以试试加上--pretty=oneline 参数;")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("reset 命令把当前分支指向另一个位置，并且有选择的变动工作目录和索引。也用来在从历史仓库中复制文件到索引，而不动工作目录。")])]),t._v(" "),e("li",[e("p",[t._v("如果不给选项（默认--mixed ），那么当前分支指向到那个提交。如果用--hard 选项，那么工作目录也更新，如果用--soft 选项，那么都不变。")])]),t._v(" "),e("li",[e("p",[t._v("如果没有给出提交点的版本号，那么默认用 HEAD。这样，分支指向不变，但是索引会回滚到最后一次提交，如果用--hard 选项，工作目录也同样。")])]),t._v(" "),e("li",[e("p",[t._v("如果给了文件名(或者 -p 选项), 那么工作效果和带文件名的 checkout 差不多，除了索引被更新。")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git reset --hard HEAD^ #回退到上个版本有多少个^就回退多少个版本\ngit reset --hard HASH #返回到某个节点，不保留修改。\ngit reset --soft HASH #返回到某个节点。保留修改。\n\n\ngit push origin master --force  #强制覆盖远程master分支  gitlab 默认master有写保护 需要先取消写保护\n")])])]),e("h3",{attrs:{id:"_11-git-pull-和-git-fetch-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-git-pull-和-git-fetch-的区别"}},[t._v("#")]),t._v(" 11.git pull 和 git fetch 的区别")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("来一张珍藏的图\n"),e("img",{attrs:{src:s(424),alt:""}})])]),t._v(" "),e("li",[e("p",[t._v("git pull = git fetch + merge")])]),t._v(" "),e("li",[e("p",[t._v("git fetch 拿到了远程所有分支的更新")])]),t._v(" "),e("li",[e("p",[t._v("merge 动作的默认目标是当前分支")])]),t._v(" "),e("li",[e("p",[t._v("merge 动作的来源则取决于你是否有 tracking")])])]),t._v(" "),e("h3",{attrs:{id:"rebase-和-merge-的用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rebase-和-merge-的用法"}},[t._v("#")]),t._v(" rebase 和 merge 的用法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("它们做的事情是一样的")])]),t._v(" "),e("li",[e("p",[t._v("merge 它是一个安全的操作,现有的分支不会被更改，但是会引入一个外来的合并提交")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git checkout feature\ngit merge master\n")])])])]),t._v(" "),e("li",[e("p",[t._v("rebase 作为 merge 的替代选择 rebase 最大的好处是你的项目历史会非常整洁, 但是你看不到 feature 分支中并入了上游的哪些更改")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  git checkout feature\n  git rebase master\n")])])]),e("h3",{attrs:{id:"_12-git-pull-push-强制覆盖本地文件-远程仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-git-pull-push-强制覆盖本地文件-远程仓库"}},[t._v("#")]),t._v(" 12.git pull/push 强制覆盖本地文件/远程仓库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("    git fetch --all\n    git reset --hard origin/master\n    git pull\n")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  git push origin master --force\n")])])]),e("h3",{attrs:{id:"_13-git-config"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-git-config"}},[t._v("#")]),t._v(" 13.git config")]),t._v(" "),e("p",[t._v("查看系统 config")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git config --system --list\n")])])]),e("p",[t._v("查看全局配置")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git config --global --list\n")])])]),e("p",[t._v("查看当前仓库配置信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git config --local  --list\n")])])]),e("p",[t._v("git 设置代理(非全局)\n地址和端口号在 ss 配置中查找")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("方法1: 在终端中直接运行命令\nexport http_proxy=http://proxyAddress:port\n这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。\n")])])]),e("p",[t._v("git 取消代理 http_proxy 以及 https_proxy")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git config --global --unset http.proxy\ngit config --global --unset https.proxy\n\n")])])]),e("p",[t._v("查看当前 proxy")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" env | grep -i proxy\n")])])]),e("h3",{attrs:{id:"_14-message-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-message-规范"}},[t._v("#")]),t._v(" 14.Message 规范")]),t._v(" "),e("h4",{attrs:{id:"类型-type-定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型-type-定义"}},[t._v("#")]),t._v(" 类型(type)定义")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("build: 版本发布")])]),t._v(" "),e("li",[e("p",[t._v("ci: 集成环境的变动")])]),t._v(" "),e("li",[e("p",[t._v("chore: 构建过程或者辅助工具的变动")])]),t._v(" "),e("li",[e("p",[t._v("docs: 文档")])]),t._v(" "),e("li",[e("p",[t._v("feat: 新功能")])]),t._v(" "),e("li",[e("p",[t._v("fix: 修复 Bug")])]),t._v(" "),e("li",[e("p",[t._v("perf: 优化相关")])]),t._v(" "),e("li",[e("p",[t._v("refactor: 重构(即不是新增功能，也不是修改 Bug 的代码变动)")])]),t._v(" "),e("li",[e("p",[t._v("revert: commit 回滚")])]),t._v(" "),e("li",[e("p",[t._v("style: 代码格式(即不影响代码运行的变动)")])]),t._v(" "),e("li",[e("p",[t._v("test: 测试相关")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("type(scope?): <subject>\n\n<body>?\n\n<foot>?\n")])])]),e("p",[t._v("type 只能小写并且不能为空，scope 只能小写，subject 简短清晰的描述这次提交并且不能为空。")]),t._v(" "),e("p",[t._v("body 可以是你这次提交的详细描述，比如新增的方法的作用，foot 可以是你这次提交的代码会带来什么影响，比如测试影响。")]),t._v(" "),e("h3",{attrs:{id:"_15-分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-分支管理"}},[t._v("#")]),t._v(" 15.分支管理")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("功能（feature）分支")])]),t._v(" "),e("li",[e("p",[t._v("预发布（release）分支")])]),t._v(" "),e("li",[e("p",[t._v("修补 bug（fixbug）分支\n这三种分支都属于临时性需要，使用完以后，应该删除，使得代码库的常设分支始终只有 Master 和 Develop。")])])]),t._v(" "),e("h4",{attrs:{id:"普通分支流程周期"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#普通分支流程周期"}},[t._v("#")]),t._v(" 普通分支流程周期")]),t._v(" "),e("ol",[e("li",[t._v("新建分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("　git checkout -b feature-x develop\n")])])]),e("ol",[e("li",[t._v("合并分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout develop\n\ngit merge  feature-x\n\n")])])]),e("ol",[e("li",[t._v("删除分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git branch -d feature-x\n")])])]),e("h4",{attrs:{id:"bug-分支流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bug-分支流程"}},[t._v("#")]),t._v(" bug 分支流程")]),t._v(" "),e("p",[e("strong",[t._v("git stash 不会把新增的文件暂存，如果想 stash 后切换分支，你需要先 git add xxx 后 git stash")])]),t._v(" "),e("ol",[e("li",[t._v("暂存当前 dev 分支（不提交到 git 服务器）")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git stash\nSaved working directory and index state WIP on dev: f52c633 add merge\n")])])]),e("ol",[e("li",[t._v("确定 bug 在哪个分支上，checkout 到对应的分支后新建 bug 分支")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git checkout -b issue-101\nSwitched to a new branch 'issue-101'\n")])])]),e("ol",[e("li",[t._v("修改完成后切换到对应的分支如 master,然后进行 merge")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git checkout master\nSwitched to branch 'master'\nYour branch is ahead of 'origin/master' by 6 commits.\n  (use \"git push\" to publish your local commits)\n\n$ git merge --no-ff -m \"merged bug fix 101\" issue-101\nMerge made by the 'recursive' strategy.\n readme.txt | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n")])])]),e("ol",[e("li",[t._v("继续切换到 dev 进行开发，解冻刚才的暂存")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git stash list\nstash@{0}: WIP on dev: f52c633 add merge\n\n$ git stash apply\n\n$ git stash apply stash@{0} 恢复指定的stash\n")])])]),e("ol",[e("li",[e("p",[t._v("关于 git stash")]),t._v(" "),e("p",[t._v("上述 4 恢复字后 stash 暂存区并不会自动删除，就是你提交暂存后也不会消失。"),e("code",[t._v("git stash list")]),t._v(" 查暂存看依旧存在,可用"),e("code",[t._v("git stash drop")]),t._v("来删除；会删除全部暂存；另一种方式是用"),e("code",[t._v("git stash pop")]),t._v("，恢复的同时把 stash 内容也删了")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("git stash pop\nDropped refs/stash@{0} (98e7191bbb73bd9e6214f79ff2b528d95b6477bd)\n")])])]),e("ol",[e("li",[t._v("注意，此时我们只是修改了 mater 上的分支，当前的 dev 分支依然存在这个问题同样的 bug，要在 dev 上修复，我们只需要把第"),e("code",[t._v("3")]),t._v("步的"),e("code",[t._v("merged bug fix 101")]),t._v("commit 头部信息 复制到"),e("code",[t._v("dev")]),t._v("分支就行；我们只是需要复制这个修改而不管其它的")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("$ git branch\n* dev\n  master\n$ git cherry-pick commit编码（例如：a264173）\n[master 1d4b803] fix bug 101\n 1 file changed, 1 insertion(+), 1 deletion(-)\n")])])]),e("ol",[e("li",[t._v("删除 stash")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 清空所有 stash")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" stash "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clear")]),t._v("\n")])])]),e("h3",{attrs:{id:"_15-git-移除远程文件夹"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-git-移除远程文件夹"}},[t._v("#")]),t._v(" 15. git 移除远程文件夹")]),t._v(" "),e("p",[t._v("把不需要版本控制的文件提交到远程分支上后，需要删除远程分支上的文件，用以下操作即可")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -r --cached "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dirname")]),t._v(" //删除远程文件夹，但保留本地文件夹\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m ‘say something’ //提交操作，并添加描述\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master //推送\n")])])]),e("p",[t._v("当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" file_path\n")])])]),e("h3",{attrs:{id:"_16-git-修改远程仓库地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-git-修改远程仓库地址"}},[t._v("#")]),t._v(" 16. git 修改远程仓库地址")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote set-url origin 新地址\n")])])]),e("h3",{attrs:{id:"_17-强制远程覆盖本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-强制远程覆盖本地"}},[t._v("#")]),t._v(" 17. 强制远程覆盖本地")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[t._v("// 从远程拉取所有内容\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch --all\n\n// reset 本地代码\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard origin/master\n\n// 重启拉取对齐\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n")])])]),e("h3",{attrs:{id:"_18-git-删除本地存在但远程不存在的分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-git-删除本地存在但远程不存在的分支"}},[t._v("#")]),t._v(" 18. git 删除本地存在但远程不存在的分支")]),t._v(" "),e("p",[t._v("使本地和远程保持同步")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote prune origin\n")])])]),e("h3",{attrs:{id:"_19-git-修改-commit-message-信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-git-修改-commit-message-信息"}},[t._v("#")]),t._v(" 19. git 修改 commit message 信息")]),t._v(" "),e("h4",{attrs:{id:"最近一次的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最近一次的"}},[t._v("#")]),t._v(" 最近一次的")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),e("h4",{attrs:{id:"历史提交的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#历史提交的"}},[t._v("#")]),t._v(" 历史提交的")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("使用 "),e("code",[t._v("git rebase -i HEAD~n")]),t._v(" 命令在默认文本编辑器中显示最近 "),e("code",[t._v("n")]),t._v(" 个提交的列表。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase -i HEAD~3\n")])])])]),t._v(" "),e("li",[e("p",[t._v("此列表将类似于以下内容：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("pick e499d89 Delete CNAME\npick 0c39034 Better README\npick f7fde4a Change the commit message but push the same commit.\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Rebase 9fdb3bd..f7fde4a onto 9fdb3bd")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# p, pick = use commit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# r, reword = use commit, but edit the commit message")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# e, edit = use commit, but stop for amending")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# s, squash = use commit, but meld into previous commit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# f, fixup = like "squash", but discard this commit\'s log message')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# x, exec = run command (the rest of the line) using shell")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("在要更改的每个提交消息的前面，用 "),e("code",[t._v("reword")]),t._v(" 替换 "),e("code",[t._v("pick")]),t._v("。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("pick e499d89 Delete CNAME\nreword 0c39034 Better README\nreword f7fde4a Change the commit message but push the same commit.\n")])])])]),t._v(" "),e("li",[e("p",[t._v("保存并关闭提交列表文件。")])]),t._v(" "),e("li",[e("p",[t._v("在每个生成的提交文件中，键入新的提交消息，保存文件，然后关闭它")])]),t._v(" "),e("li",[e("p",[t._v("准备好将更改推送到 GitHub 时，请使用 push - force 命令强制推送旧提交。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --force example-branch\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"_20-git-cherry-pick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-git-cherry-pick"}},[t._v("#")]),t._v(" 20. git cherry-pick")]),t._v(" "),e("blockquote",[e("p",[t._v("将指定的提交（commit）应用于其他分支。")])]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("commitHash"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("举例来说，代码仓库有"),e("code",[t._v("master")]),t._v("和"),e("code",[t._v("feature")]),t._v("两个分支。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("a - b - c - d   Master\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n           e - f - g Feature\n")])])]),e("p",[t._v("现在将提交"),e("code",[t._v("f")]),t._v("应用到"),e("code",[t._v("master")]),t._v("分支。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 切换到 master 分支")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Cherry pick 操作")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick f\n")])])]),e("p",[t._v("上面的操作完成以后，代码库就变成了下面的样子。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v(" a - b - c - d - f   Master\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n           e - f - g Feature\n")])])]),e("p",[e("code",[t._v("git cherry-pick")]),t._v("命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示将 feature 分支的最近一次提交，转移到当前分支。")]),t._v("\n$ "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick feature\n")])])]),e("h3",{attrs:{id:"_21-恢复远程仓库删除的代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-恢复远程仓库删除的代码"}},[t._v("#")]),t._v(" 21. 恢复远程仓库删除的代码")]),t._v(" "),e("p",[t._v("先列出提交日志，找到删除那次提交的 commit")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --diff-filter"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("D --summary\n")])])]),e("p",[t._v("找到后")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$commit")]),t._v("~1 filename\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 例如")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout 3b63e41b68f2ea97d11c166c00cd22589639806e~1 yarn.lock\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);