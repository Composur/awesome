(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{558:function(t,v,s){"use strict";s.r(v);var a=s(56),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,s=t._self._c||v;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h4",{attrs:{id:"简单说一说-vuex-使用及其理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单说一说-vuex-使用及其理解"}},[t._v("#")]),t._v(" 简单说一说 vuex 使用及其理解？")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://mmbiz.qpic.cn/mmbiz_png/pfCCZhlbMQRYY0ypIkjeGZAEdajHALsicttzFicvxxTOX6Q34AELgZQAYHiboibMDLVwTmsLhBfuk1pA4AOtyG87rw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1",alt:"img"}})]),t._v(" "),s("p",[t._v("回答策略：")]),t._v(" "),s("p",[t._v("1、首先给 vuex 下一个定义")]),t._v(" "),s("ul",[s("li",[t._v("vuex 是 vue 专用的状态管理库。")]),t._v(" "),s("li",[t._v("它以全局方式集中管理应用的状态，并且可以保证状态变更的可预测性。")])]),t._v(" "),s("p",[t._v("2、vuex 解决了哪些问题，解读理念")]),t._v(" "),s("ul",[s("li",[t._v("vuex 主要解决的问题是多组件之间状态共享的问题，利用各种组件通信方式，我们虽然能够做到状态共享。但是往往需要在多个组件之间保持状态的一致性，这种模式很容易出现问题，也会使程序逻辑变得复杂。")]),t._v(" "),s("li",[t._v("vuex 通过把组件的共享状态抽取出来，以全局单例模式管理。这样任何组件都能用一致的方式获取和修改状态。")]),t._v(" "),s("li",[t._v("响应式的数据也能够保证简洁的单向数据流动，我们的代码将变得更结构化且易维护。")])]),t._v(" "),s("p",[t._v("3、什么时候我们需要 vuex")]),t._v(" "),s("ul",[s("li",[t._v("如果我们不打算开发大型单页应用或者我们的应用并没有大量全局的状态需要维护，一个简单的store 模式就足够了")])]),t._v(" "),s("p",[t._v("4、你的具体用法")]),t._v(" "),s("ul",[s("li",[t._v("将全局状态放入 state 对象中，它本身一棵状态树，组件中使用 store 实例的 state 访问这些状态")]),t._v(" "),s("li",[t._v("然后有配套的 mutation 方法修改这些状态，并且只能用 mutation 修改状态，在组件中调用commit 方法提交 mutation")]),t._v(" "),s("li",[t._v("如果应用中有异步操作或者复杂逻辑组合，我们需要编写 action，执行结束如果有状态修改仍然需要提交 mutation，组件中调用这些 action 使用 dispatch 方法派发。")]),t._v(" "),s("li",[t._v("最后是模块化，通过 modules 选项组织拆分出去的各个子模块，在访问状态时注意添加子模块的名称；如果子模块有设置 namespace，那么在提交 mutation 和派发 action 时还需要额外的命名空间前缀")])]),t._v(" "),s("p",[t._v("5、简述原理，提升层级")]),t._v(" "),s("ul",[s("li",[t._v("vuex 在实现单项数据流时需要做到数据的响应式。是借用了 vue 的数据响应化特性实现的。")]),t._v(" "),s("li",[t._v("利用 Vue 将 state 作为 data 对其进行响应化处理，从而使得这些状态发生变化时，能够导致组件重新渲染。")])]),t._v(" "),s("h4",{attrs:{id:"vue中组件之间的通讯方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue中组件之间的通讯方式"}},[t._v("#")]),t._v(" "),s("strong",[t._v("VUE中组件之间的通讯方式")])]),t._v(" "),s("ol",[s("li",[t._v("父子之间的通信\n"),s("ul",[s("li",[t._v("props")]),t._v(" "),s("li",[t._v("$emit / $on")]),t._v(" "),s("li",[t._v("$parent / $children")]),t._v(" "),s("li",[t._v("ref")]),t._v(" "),s("li",[t._v("$attrs / $listeners")])])]),t._v(" "),s("li",[t._v("兄弟组件间的通信\n"),s("ul",[s("li",[t._v("$parent")]),t._v(" "),s("li",[t._v("$root")]),t._v(" "),s("li",[t._v("vuex")]),t._v(" "),s("li",[t._v("eventbus")])])]),t._v(" "),s("li",[t._v("跨层级通信\n"),s("ul",[s("li",[t._v("eventbus")]),t._v(" "),s("li",[t._v("vuex")]),t._v(" "),s("li",[t._v("provide / inject")])])])]),t._v(" "),s("h4",{attrs:{id:"nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexttick"}},[t._v("#")]),t._v(" "),s("strong",[t._v("nextTick")])]),t._v(" "),s("blockquote",[s("p",[t._v("在同一个事件循环中，当所有的同步任务执行完毕后，就会执行 nextTick")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("nextTick 是啥 ？")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextTick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在下次 DOM 更新循环结束之后执行延迟回调。")]),t._v(" "),s("p",[t._v("在修改数据之后立即使用这个方法，获取更新后的 DOM。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'changed'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 还没有更新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("$nextTick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM 现在更新了")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// `this` 绑定到当前实例")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("doSomethingElse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("为什么需要它呢？")]),t._v(" "),s("ol",[s("li",[t._v("由于 vue 的异步更新策略导致我们对数据的修改不会立刻体现在 dom 变化上。此时如果想要立即获取更新后的dom状态，就需要使用这个方法。")])])]),t._v(" "),s("li",[s("p",[t._v("我再什么地方用它呢？")]),t._v(" "),s("ol",[s("li",[t._v("nextTick 方法会在队列中加入一个回调函数，确保该函数在前面的dom操作完成后才调用。")]),t._v(" "),s("li",[t._v("所以当我们想在修改数据后立即看到 dom 执行结果就需要用到 nextTick 方法。")])])]),t._v(" "),s("li",[s("p",[t._v("源码实现")]),t._v(" "),s("ol",[s("li",[t._v("它会在 callbacks 里面加入我们传入的函数。然后用 timerFunc 异步方式调用它们，首选的异步方式会是 Promise。")])])])]),t._v(" "),s("h4",{attrs:{id:"vue-响应式理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-响应式理解"}},[t._v("#")]),t._v(" "),s("strong",[t._v("vue 响应式理解")])]),t._v(" "),s("ol",[s("li",[t._v("什么是响应式\n"),s("ol",[s("li",[t._v("数据响应式就是能够使数据变化可以被检测并对这种变化做出响应的机制。")])])]),t._v(" "),s("li",[t._v("为什么 vue 需要响应式？\n"),s("ol",[s("li",[t._v("mvvm 框架中要解决的一个核心问题是连接数据层和视图层，通过数据驱动应用，数据变化，视图更新。要做到这点的就需要对数据做响应式处理，这样一旦数据发生变化就可以立即做出更新处理。")]),t._v(" "),s("li",[t._v("以 vue 为例，通过数据响应式加上虚拟 DOM 和 patch 算法。可以使我们只需要操作数据，完全不用接触繁琐的 dom 操作，从而大大提升开发效率，降低开发难度。")])])]),t._v(" "),s("li",[t._v("vue的响应式是怎么实现的？有哪些优缺点？\n"),s("ol",[s("li",[t._v("vue2 中的数据响应式会根据数据类型来做不同处理。")]),t._v(" "),s("li",[t._v("如果是对象则采用Object.defineProperty() 的方式定义数据拦截。当数据被访问或发生变化时，作出响应；")]),t._v(" "),s("li",[t._v("如果是数组则通过覆盖该数组原型的方法，扩展它的7个变更方法，使这些方法可以额外的做更新通知，从而作出响应。")]),t._v(" "),s("li",[t._v("缺点\n"),s("ol",[s("li",[t._v("比如初始化时的递归遍历会造成性能损失；")]),t._v(" "),s("li",[t._v("新增或删除属性时需要用户使用 Vue.set/delete 这样特殊的 api 才能生效；")]),t._v(" "),s("li",[t._v("对于 es6 中新产生的 Map、Set 这些数据结构不支持等问题。")])])])])]),t._v(" "),s("li",[t._v("vue3 中的响应式的新变化\n"),s("ol",[s("li",[t._v("利用 ES6 的 Proxy 机制代理要响应化的数据，不需要使用特殊api。")])])])])])}),[],!1,null,null,null);v.default=e.exports}}]);