(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{485:function(n,t,e){"use strict";e.r(t);var a=e(56),r=Object(a.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h3",{attrs:{id:"call-、apply-和bind的实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call-、apply-和bind的实现"}},[n._v("#")]),n._v(" call 、apply 和bind的实现")]),n._v(" "),e("h4",{attrs:{id:"call"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[n._v("#")]),n._v(" call")]),n._v(" "),e("blockquote",[e("p",[n._v("call方法使用一个指定的this值和若干个指定参数值的前提下调用的某个函数或方法")])]),n._v(" "),e("h5",{attrs:{id:"es5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es5"}},[n._v("#")]),n._v(" es5")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Function.prototype.call2=function(context){\n    context=context || window\n    var arg=[]\n    for(var i=1;i<arguments.length;i++){\n        arg.push('arguments['+i+']')\n    }\n    context.fn=this\n    var result=eval('context.fn('+arg+')') //eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。\n    delete context.fn\n    return result\n}\n")])])]),e("h4",{attrs:{id:"es6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[n._v("#")]),n._v(" es6")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Function.prototype.myCall = function (obj) {\n  let context = obj || window\n  obj.fn = this\n  let args = [...arguments].splice(1)\n  let result = obj.fn(...args)\n  delete obj.fn\n  return result\n}\n\nFunction.prototype.myApply = function (obj) {\n  let context = obj || window\n  obj.fn = this\n  let args = arguments[1]\n  let result\n  if (args) {\n    result = obj.fn(...args)\n  } else {\n    result = obj.fn()\n  }\n\n  delete obj.fn\n\n  return result\n}\n\nFunction.prototype.myBind = function (obj) {\n  let context = obj || window\n  let _this = this\n  let _args = [...arguments].splice(1)\n\n  return function () {\n    let args = arguments\n    // 产生副作用\n    // return obj.fn(..._args, ...args)\n    return _this.apply(context, [..._args, ...args])\n  }\n}\n\nfunction myFun (argumentA, argumentB) {\n  console.log(this.value)\n  console.log(argumentA)\n  console.log(argumentB)\n  return this.value\n}\n\nlet obj = {\n  value: 'ziyi2'\n}\nconsole.log(myFun.myCall(obj, 11, 22))\nconsole.log(myFun.myApply(obj, [11, 22]))\nconsole.log(myFun.myBind(obj, 33)(11, 22))\n\n")])])]),e("h4",{attrs:{id:"bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[n._v("#")]),n._v(" bind")]),n._v(" "),e("blockquote",[e("p",[n._v("bind() 方法会创建一个新函数。当这个新函数被调用时，bind() 的第一个参数将作为它运行时的 this，之后的一序列参数将会在传递的实参前传入作为它的参数。")])]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Function.prototype.bind2 = function (context) {\n\n    if (typeof this !== "function") {\n      throw new Error("Function.prototype.bind - what is trying to be bound is not callable");\n    }\n\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 1);\n\n    var fNOP = function () {};\n\n    var fBound = function () {\n        var bindArgs = Array.prototype.slice.call(arguments);\n        return self.apply(this instanceof fNOP ? this : context, args.concat(bindArgs));\n    }\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n    return fBound;\n}\n\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);